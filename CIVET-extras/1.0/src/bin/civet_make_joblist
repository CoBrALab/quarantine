#!/usr/bin/env python
"""
Outputs a CIVET_Processing_Pipeline command line per input image.

Expects that your images are named according to the CIVET naming convention
(e.g. <prefix>_<id>_t1.mnc).

Default arguments to CIVET_Processing_Pipeline are:
-N3-distance 200 -lsq12 -resample-surfaces -thickness tlink 20 -no-combine-surfaces -no-VBM

To override the default arguments to CIVET_Processing_Pipeline, invoke this
script like so: 

  civet_make_joblist input/ prefix -- <civet-arguments> 

where <civet-arguments> can be a list of any of the command line arguments
CIVET_Processing_Pipeline takes. e.g. 

  civet_make_joblist input/ prefix -- -VBM -thickness tlink 20

Use this command to make job list and then submit that to a job scheduler, e.g.

  civet_make_joblist input/ prefix > job_list
  qbatch job_list 1 8:00:00 
"""

import argparse
import glob
import sys
import os, os.path

if __name__ == '__main__':
  default_civet_args = "-N3-distance 200 -lsq12 -resample-surfaces -thickness tlink 20 -no-combine-surfaces -no-VBM"

  parser = argparse.ArgumentParser(description=__doc__,
          formatter_class=argparse.RawTextHelpFormatter)
  parser.add_argument('input_dir', 
    help='Path to the directory containing your input .mnc files')
  parser.add_argument('prefix', 
    help='Prefix used in naming your files')
  parser.add_argument('civet_arg', nargs="*", default=default_civet_args.split(),
    help='Arguments to CIVET_Processing_Pipeline')
   
  args = parser.parse_args()

  postfix = '_t1.mnc'
  prefix = args.prefix
  name_prefix = prefix + "_"
  input_dir = args.input_dir
  civet_args = args.civet_arg

  for mnc in glob.glob(os.path.join(input_dir, '*.mnc')):
    basename = os.path.basename(mnc) 

    assert basename.startswith(name_prefix), \
      "Input file {} is not named with prefix {}".format(mnc, prefix)
    assert basename.endswith(postfix), \
      "Input file {} is not named with postfix {}".format(mnc, postfix)

    id = basename[len(name_prefix):-len(postfix)] 

    civet_command = "CIVET_Processing_Pipeline " + \
                    " -sourcedir {} ".format(input_dir) + \
                    " -targetdir output/ " + \
                    " -prefix {} ".format(prefix) + \
                    " -no-granular " + \
                    " -spawn " + \
                    " -run " + \
                    " ".join(civet_args) + \
                    " {}".format(id)
                    
    print civet_command    
