rm(list = ls())
library(RMINC)
library(mni.cortical.statistics)
library(ggplot2)
library(MASS)
mni.robust.vertex.statistics <- function (glim.matrix, statistics.model = NA, vertex.table = FALSE)
{
number.subjects <- nrow(glim.matrix)
if (mode(vertex.table) != "logical") {
number.vertices <- nrow(vertex.table)
}
else {
number.vertices <- length(as.matrix(read.table(as.character(glim.matrix[1,
1]))))
}
if (mode(vertex.table) == "logical") {
vertex.table <- matrix(NA, nrow = number.vertices, ncol = number.subjects)
for (i in 1:number.subjects) {
vertex.table[, i] <- as.matrix(read.table(as.character(glim.matrix[i,
1])))
}
attach(glim.matrix)
y <- vertex.table[1, ]
l <- rlm(formula(statistics.model), method="MM", scale.est="Huber", maxit=1000, acc=1e-6)
s <- summary(l)
variable.names <- row.names(s$coefficients)
variable.names <- gsub("\\[\\(\\)]", "", variable.names,
perl = TRUE)
number.terms <- length(variable.names)
results <- list(adj.r.squared = vector(length = number.vertices),
fstatistic = vector(length = number.vertices), intercept = vector(length = number.vertices),
slope = data.frame(matrix(NA, nrow = number.vertices,
ncol = number.terms)), std.error = data.frame(matrix(NA,
nrow = number.vertices, ncol = number.terms)), tstatistic = data.frame(matrix(NA,
nrow = number.vertices, ncol = number.terms)))
slope <- matrix(data = NA, nrow = number.vertices, ncol = number.terms)
tstats <- matrix(data = NA, nrow = number.vertices, ncol = number.terms)
stderr <- matrix(data = NA, nrow = number.vertices, ncol = number.terms)
modulo <- 1000
f <- formula(statistics.model)
cat("   Percent done: ")
for (v in 1:number.vertices) {
y <- vertex.table[v, ]
s = summary(rlm(f, method="MM", scale.est="Huber", maxit=1000, acc=1e-6))
results$intercept[v] <- s$coefficients[1, 1]
slope[v, ] <- s$coefficients[, 1]
stderr[v, ] <- s$coefficients[, 2]
tstats[v, ] <- s$coefficients[, 3]
if (v%%modulo == 0) {
cat(format((v/number.vertices) * 100, digits = 3))
cat("%  ")
}
cat("\n")
results$slope = slope
results$std.error = stderr
results$tstatistic = tstats
colnames(results$slope) <- variable.names
colnames(results$std.error) <- variable.names
colnames(results$tstatistic) <- variable.names
detach(glim.matrix)
return(results)
}
data <- read.csv("/home/cic/bedsaa/Documents/SfN abstract//ABIDE_final_4.csv")
data$DX<-relevel(data$DX, ref="Control")
data$Sex_edit<-relevel(data$Sex_edit, ref="Male")
data$left_thickness <- paste("/data/chamal/projects/matt/Neuro_datasets/Processed_CIVET/thickness/MP20k_",data$CIVET_ID, "_native_rms_rsl_tlink_28.2843mm_left.txt", sep="")
data$right_thickness <- paste("/data/chamal/projects/matt/Neuro_datasets/Processed_CIVET/thickness/MP20k_",data$CIVET_ID, "_native_rms_rsl_tlink_28.2843mm_right.txt", sep="")
data$left_surfaces <- paste("/data/chamal/projects/matt/Neuro_datasets/Processed_CIVET/surfaces/MP20k_",data$CIVET_ID, "_mid_surface_rsl_left_native_area_56.5685mm.txt", sep="")
data$right_surfaces <- paste("/data/chamal/projects/matt/Neuro_datasets/Processed_CIVET/surfaces/MP20k_",data$CIVET_ID, "_mid_surface_rsl_right_native_area_56.5685mm.txt", sep="")
###Subset for Site, CIVET QC and data exists
filtered.data=subset(data, data$Exists==1 & data$CIVET_QC==1 & (data$Site_orig=="NYU" | data$Site_orig=="UCLA_1" | data$Site_orig=="YALE"))
#Load data we need
leftthicknessdata <- vertexTable(filtered.data$left_thickness)
rightthicknessdata <- vertexTable(filtered.data$right_thickness)
leftsurfacesdata <- vertexTable(filtered.data$left_surfaces)
rightsurfacesdata <- vertexTable(filtered.data$right_surfaces)
asdleftthicknessdata <- vertexTable(subset(filtered.data, DX=="Autism")$left_thickness)
rlm_asd = mni.robust.vertex.statistics(subset(filtered.data, DX=="Autism"), 'y ~ Sex_edit + Age', asdleftthicknessdata)
write.table(rlm_asd$tstatistic, col.names=FALSE, row.names=FALSE, file="/tmp/rlm.txt")
mni.compute.FDR(t.stats = rlm_asd$tstatistic[,2], df = 136, fdr=0.05)[[1]]
