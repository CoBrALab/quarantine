downloadPath <- file.path(dataPath, "rminctestdata.tar.gz")
extractedPath <- file.path(dataPath, "rminctestdata/")
if (!file.exists(downloadPath)) {
dir.create(dataPath, showWarnings = FALSE, recursive = TRUE)
download.file("https://wiki.mouseimaging.ca/download/attachments/1654/rminctestdata2.tar.gz",
destfile = downloadPath, method = "libcurl")
}
untar(downloadPath, exdir = dataPath, compressed = "gzip")
rectifyPaths <- function(file) {
readLines(file) %>% gsub("/tmp/rminctestdata/", extractedPath,
.) %>% writeLines(file)
invisible(NULL)
}
filesToFix <- c("filenames.csv", "minc_summary_test_data.csv",
"test_data_set.csv") %>% file.path(extractedPath, .)
lapply(filesToFix, rectifyPaths)
invisible(NULL)
}
getminc <- function (dataPath = tempdir())
{
downloadPath <- file.path(dataPath, "rminctestdata.tar.gz")
extractedPath <- file.path(dataPath, "rminctestdata/")
if (!file.exists(downloadPath)) {
dir.create(dataPath, showWarnings = FALSE, recursive = TRUE)
download.file("https://wiki.mouseimaging.ca/download/attachments/1654/rminctestdata2.tar.gz",
destfile = downloadPath, method = "libcurl")
}
untar(downloadPath, exdir = dataPath, compressed = "gzip")
rectifyPaths <- function(file) {
readLines(file) %>% gsub("/tmp/rminctestdata/", extractedPath,
.) %>% writeLines(file)
invisible(NULL)
}
filesToFix <- c("filenames.csv", "minc_summary_test_data.csv",
"test_data_set.csv") %>% file.path(extractedPath, .)
lapply(filesToFix, rectifyPaths)
invisible(NULL)
}
getminc
getminc()
getminc <- function (dataPath = tempdir())
{
downloadPath <- file.path(dataPath, "rminctestdata.tar.gz")
extractedPath <- file.path(dataPath, "rminctestdata/")
if (!file.exists(downloadPath)) {
dir.create(dataPath, showWarnings = FALSE, recursive = TRUE)
download.file("https://wiki.mouseimaging.ca/download/attachments/1654/rminctestdata2.tar.gz",
destfile = downloadPath)
}
untar(downloadPath, exdir = dataPath, compressed = "gzip")
rectifyPaths <- function(file) {
readLines(file) %>% gsub("/tmp/rminctestdata/", extractedPath,
.) %>% writeLines(file)
invisible(NULL)
}
filesToFix <- c("filenames.csv", "minc_summary_test_data.csv",
"test_data_set.csv") %>% file.path(extractedPath, .)
lapply(filesToFix, rectifyPaths)
invisible(NULL)
}
getminc()
?vertexLm
?vertexLmer
?vertexLm
?vertexApply
library(parallel)
?mincLm
gf <- read.csv("/tmp/rminctestdata/test_data_set.csv")
vs <- mincLm(jacobians_fixed_2 ~ Sex, gf)
vs <- mincLm(jacobians_fixed_2 ~ Sex, gf, parallel="local")
vs <- mincLm(jacobians_fixed_2 ~ Sex, gf, parallel=c("local",4))
vs <- mincLm(jacobians_fixed_2 ~ Sex, gf, parallel=c("sge",4))
configureMincParallel("sge")
vs <- mincLm(jacobians_fixed_2 ~ Sex, gf, parallel=c("sge",4))
vs2 <- mincLm(jacobians_fixed_2 ~ Sex, gf, parallel=c("sge",2))
library(RMINC)
configureMincParallel("sge")
vs <- mincLm(jacobians_fixed_2 ~ Sex, gf, parallel=c("sge",4))
gf <- read.csv("/tmp/rminctestdata/test_data_set.csv")
vs <- mincLm(jacobians_fixed_2 ~ Sex, gf, parallel=c("sge",4))
?mincLmer
View(gf)
?vertexLmer
?mincLm
?vertexLm
gf = read.csv("/tmp/rminctestdata/CIVET_TEST.csv")
gf = civet.getAllFilenames(gf,"ID","TEST","/tmp/rminctestdata/CIVET","TRUE","1.1.12")
gf = civet.readAllCivetFiles("/tmp/rminctestdata/AAL.csv",gf)
result = vertexLm(CIVETFILES$nativeRMStlink20mmleft~Primary.Diagnosis,gf)
?mincFindPeaks
mincFindPeaks(result)
result
vertexFDR(results)
vertexFDR(result)
?vertexFDR
?mincFDR
vertexFDR(result, method="pFDR")
?mincTFCE
?civet.checkVersion
civet.checkVersion(1.1.12)
civet.checkVersion("1.1.12")
?civet.getAllFilenames
civet.getAllFilenames()
rm(list = ls())
library(RMINC)
library(mni.cortical.statistics)
library(ggplot2)
library(MASS)
library(rgl)
library(gamlss)
mni.robust.vertex.statistics <-
function (glim.matrix,
statistics.model = NA,
vertex.table = FALSE)
{
number.subjects <- nrow(glim.matrix)
if (mode(vertex.table) != "logical") {
number.vertices <- nrow(vertex.table)
}
else {
number.vertices <-
length(as.matrix(read.table(as.character(glim.matrix[1,
1]))))
}
if (mode(vertex.table) == "logical") {
vertex.table <-
matrix(NA, nrow = number.vertices, ncol = number.subjects)
for (i in 1:number.subjects) {
vertex.table[, i] <-
as.matrix(read.table(as.character(glim.matrix[i,
1])))
}
attach(glim.matrix)
y <- vertex.table[1,]
l <-
rlm(
formula(statistics.model),
method = "MM",
scale.est = "Huber",
maxit = 1000,
acc = 1e-6
)
s <- summary(l)
variable.names <- row.names(s$coefficients)
variable.names <- gsub("\\[\\(\\)]", "", variable.names,
perl = TRUE)
number.terms <- length(variable.names)
results <- list(
adj.r.squared = vector(length = number.vertices),
fstatistic = vector(length = number.vertices),
intercept = vector(length = number.vertices),
slope = data.frame(matrix(NA, nrow = number.vertices,
ncol = number.terms)),
std.error = data.frame(matrix(NA,
nrow = number.vertices, ncol = number.terms)),
tstatistic = data.frame(matrix(NA,
nrow = number.vertices, ncol = number.terms))
)
slope <-
matrix(data = NA,
nrow = number.vertices,
ncol = number.terms)
tstats <-
matrix(data = NA,
nrow = number.vertices,
ncol = number.terms)
stderr <-
matrix(data = NA,
nrow = number.vertices,
ncol = number.terms)
modulo <- 1000
f <- formula(statistics.model)
cat("   Percent done: ")
for (v in 1:number.vertices) {
y <- vertex.table[v,]
s = summary(rlm(
f,
method = "MM",
scale.est = "Huber",
maxit = 1000,
acc = 1e-6
))
results$intercept[v] <- s$coefficients[1, 1]
slope[v,] <- s$coefficients[, 1]
stderr[v,] <- s$coefficients[, 2]
tstats[v,] <- s$coefficients[, 3]
if (v %% modulo == 0) {
cat(format((v / number.vertices) * 100, digits = 3))
cat("%  ")
}
cat("\n")
results$slope = slope
results$std.error = stderr
results$tstatistic = tstats
colnames(results$slope) <- variable.names
colnames(results$std.error) <- variable.names
colnames(results$tstatistic) <- variable.names
detach(glim.matrix)
return(results)
}
huber_wrapper <- function(X) {
#Extracts just the mean estimate from the huber M-estimator function
result = huber(X)
return(result$mu)
}
vertexHistogram = function(linmodel, fdrmodel) {
columns = grep("Intercept", invert=TRUE, value=TRUE, grep("tvalue", colnames(fdrmodel), value=TRUE))
for (column in columns) {
#Generates a nice histogram of vertexLm t-values, with FDR levels labelled
legendline = c(c("FDR 5%", attributes(fdrmodel)$thresholds["0.05", column]),
c("MAX", max(linmodel[, column])),
c("MIN", min(linmodel[, column])))
hist(
linmodel[, column],
breaks = seq(floor(min(linmodel[, column])), ceiling(max(linmodel[, column])), by =
0.25),
xlab = paste(deparse(substitute(linmodel)), ",", column),
main =  paste(deparse(substitute(linmodel)), ",", column)
)
legend("topleft", legend = legendline)
lim <- par("usr")
rect(
lim[1],
lim[3],
-attributes(fdrmodel)$thresholds["0.01", column],
lim[4],
border = '#00FF0055',
col = '#00FF0077'
)
rect(
attributes(fdrmodel)$thresholds["0.01", column],
lim[3],
lim[2],
lim[4],
border = '#00FF0055',
col = '#00FF0077'
)
rect(
-attributes(fdrmodel)$thresholds["0.01", column],
lim[3],
-attributes(fdrmodel)$thresholds["0.05", column],
lim[4],
border = '#00FF0055',
col = '#00FF0055'
)
rect(
attributes(fdrmodel)$thresholds["0.05", column],
lim[3],
attributes(fdrmodel)$thresholds["0.01", column],
lim[4],
border = '#00FF0055',
col = '#00FF0055'
)
rect(
-attributes(fdrmodel)$thresholds["0.05", column],
lim[3],
-attributes(fdrmodel)$thresholds["0.1", column],
lim[4],
border = '#FFFF0055',
col = '#FFFF0055'
)
rect(
attributes(fdrmodel)$thresholds["0.1", column],
lim[3],
attributes(fdrmodel)$thresholds["0.05", column],
lim[4],
border = '#FFFF0055',
col = '#FFFF0055'
)
rect(
-attributes(fdrmodel)$thresholds["0.1", column],
lim[3],
-attributes(fdrmodel)$thresholds["0.2", column],
lim[4],
border = '#FF000055',
col = '#FF000055'
)
rect(
attributes(fdrmodel)$thresholds["0.2", column],
lim[3],
attributes(fdrmodel)$thresholds["0.1", column],
lim[4],
border = '#FF000055',
col = '#FF000055'
)
}
vertexTrajectory = function(data,
variable_name,
linmodel,
stat,
vertextable,
n,
title) {
tempdata = data.frame(cbind(data[variable_name], vertextable[n, ]), data$M.F)
names(tempdata) = c("X1", "X2", "M.F")
print(
ggplot(tempdata, aes(x = X1, y = X2)) + geom_point() + stat_smooth(
method = "lm",
formula = y ~ poly(x, 2),
size = 1
) + xlab(variable_name) + ylab("Thickness (mm)") + ggtitle(paste(title))
)
}
SATrajectory = function(data,
variable_name,
linmodel,
stat,
vertextable,
n,
title) {
tempdata = data.frame(cbind(data[variable_name], vertextable[n, ]), data$M.F)
names(tempdata) = c("X1", "X2", "M.F")
print(
ggplot(tempdata, aes(x = X1, y = X2)) + geom_point() + stat_smooth(
method = "lm",
formula = y ~ poly(x, 2),
size = 1
) + xlab(variable_name) + ylab("Surface Area (mm^2)") + ggtitle(paste(title))
)
}
SALinTrajectory = function(data,
variable_name,
linmodel,
stat,
vertextable,
n,
title) {
tempdata = data.frame(cbind(data[variable_name], vertextable[n, ]), data$M.F)
names(tempdata) = c("X1", "X2", "M.F")
print(
ggplot(tempdata, aes(x = X1, y = X2)) + geom_point() + stat_smooth(
method = "lm",
formula = y ~ x,
size = 1
) + xlab(variable_name) + ylab("Surface Area (mm^2)") + ggtitle(paste(title))
)
}
vertexMaxTrajectory = function(data,
variable_name,
linmodel,
stat,
vertextable) {
n = which(linmodel[, stat] == max(linmodel[, stat]), arr.ind = TRUE)
tempdata = data.frame(cbind(data[variable_name], vertextable[n, ]), data$M.F)
names(tempdata) = c("X1", "X2", "M.F")
print(
ggplot(tempdata, aes(
x = X1,
y = X2,
color = factor(M.F)
)) + geom_point() + stat_smooth(
method = "lm",
formula = y ~ poly(x, 2),
size = 1
) + xlab(variable_name) + ylab("Thickness (mm)") + ggtitle(
paste(
"Trajectory of maximum t-stat of",
deparse(substitute(linmodel)),
stat,
"N = ",
n
)
}
vertexMinTrajectory = function(data,
variable_name,
linmodel,
stat,
vertextable) {
n = which(linmodel[, stat] == min(linmodel[, stat]), arr.ind = TRUE)
tempdata = data.frame(cbind(data[variable_name], vertextable[n, ]), data$M.F)
names(tempdata) = c("X1", "X2", "M.F")
print(
ggplot(tempdata, aes(
x = X1,
y = X2,
color = factor(M.F)
)) + geom_point() + stat_smooth(
method = "lm",
formula = y ~ poly(x, 2),
size = 1
) + xlab(variable_name) + ylab("Thickness (mm)") + ggtitle(
paste(
"Trajectory of minimum t-stat of",
deparse(substitute(linmodel)),
stat,
"N = ",
n
)
}
CCmask = read.table("/opt/quarantine/resources/CIVET-CC-mask.txt")
data = read.csv('demographics.csv', na.strings = c("NA", "N/A"))
tbv = read.csv('brainvolume.csv')
icv = read.csv('ICV.csv')
AAL = read.csv('AAL_volumes.csv')
data = merge(data, tbv, by = "ID", all.x = TRUE)
data = merge(data, icv, by = "ID", all.x = TRUE)
data = merge(data, AAL, by = "ID", all.x = TRUE)
data$Educ = as.factor(data$Educ)
data$SES = as.factor(data$SES)
data$M.F = relevel(data$M.F, ref = "M")
data$left_thickness <-
paste(
"/data/chamal/projects/gabriel/OASIS/average8/bpipe/CIVET/output/",
data$ID,
"/thickness/OASIS_",
data$ID,
"_native_rms_rsl_tlink_28.28mm_left.txt",
sep = ""
)
data$right_thickness <-
paste(
"/data/chamal/projects/gabriel/OASIS/average8/bpipe/CIVET/output/",
data$ID,
"/thickness/OASIS_",
data$ID,
"_native_rms_rsl_tlink_28.28mm_right.txt",
sep = ""
)
data$left_SA <-
paste(
"/data/chamal/projects/gabriel/OASIS/average8/bpipe/CIVET/output/",
data$ID,
"/surfaces/OASIS_",
data$ID,
"_mid_surface_rsl_left_native_area_56.57mm.txt",
sep = ""
)
data$right_SA <-
paste(
"/data/chamal/projects/gabriel/OASIS/average8/bpipe/CIVET/output/",
data$ID,
"/surfaces/OASIS_",
data$ID,
"_mid_surface_rsl_right_native_area_56.57mm.txt",
sep = ""
)
data$left_mc <-
paste(
"/data/chamal/projects/gabriel/OASIS/average8/bpipe/CIVET/output/",
data$ID,
"/thickness/OASIS_",
data$ID,
"_native_mc_rsl_28.28mm_mid_left.txt",
sep = ""
)
data$right_mc <-
paste(
"/data/chamal/projects/gabriel/OASIS/average8/bpipe/CIVET/output/",
data$ID,
"/thickness/OASIS_",
data$ID,
"_native_mc_rsl_28.28mm_mid_right.txt",
sep = ""
)
data$left_gi <-
paste(
"/data/chamal/projects/gabriel/OASIS/average8/bpipe/CIVET/output/",
data$ID,
"/thickness/OASIS_",
data$ID,
"_native_localGI_rsl_28.28mm_gray_left.txt",
sep = ""
)
data$right_gi <-
paste(
"/data/chamal/projects/gabriel/OASIS/average8/bpipe/CIVET/output/",
data$ID,
"/thickness/OASIS_",
data$ID,
"_native_localGI_rsl_28.28mm_gray_right.txt",
sep = ""
)
data$asym <-
paste(
"/data/chamal/projects/gabriel/OASIS/average8/bpipe/CIVET/output/",
data$ID,
"/surfaces/OASIS_",
data$ID,
"_native_pos_rsl_asym_hemi.txt",
sep = ""
)
#CIVET-Only
filtered.data = subset(data, (data$CDR!=1 & data$CDR!=2 | is.na(data$CDR)) & is.na(data$Delay) )
# filtered.data = subset(
#   data,
#     data$CIVETQC > 0 &
#     (data$CDR != 1 &
#        data$CDR != 2 | is.na(data$CDR)) & is.na(data$Delay)
# )
# #Read in all the data for faster computation
leftthicknessdata <- vertexTable(filtered.data$left_thickness)
rightthicknessdata <- vertexTable(filtered.data$right_thickness)
leftgidata <- vertexTable(filtered.data$left_gi)
rightgidata  <- vertexTable(filtered.data$right_gi)
leftmeangi = colMeans(leftgidata)
rightmeangi = colMeans(rightgidata)
#
leftmean = colMeans(leftthicknessdata)
rightmean = colMeans(rightthicknessdata)
#leftmean = apply(leftthicknessdata,2,huber_wrapper)
#rightmean = apply(rightthicknessdata,2,huber_wrapper)
CTmean = colMeans(rbind(leftthicknessdata, rightthicknessdata))
#
leftSAdata = vertexTable(filtered.data$left_SA)
rightSAdata = vertexTable(filtered.data$right_SA)
leftSAtotal = colSums(leftSAdata)
rightSAtotal = colSums(rightSAdata)
SAtotal = colSums(rbind(leftSAdata, rightSAdata))
#
leftmcdata = vertexTable(filtered.data$left_mc)
rightmcdata =  vertexTable(filtered.data$right_mc)
asymdata = vertexTable(filtered.data$asym)
